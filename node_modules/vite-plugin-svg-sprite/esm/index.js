import p from 'path';
import fs from 'fs';
import crypto from 'crypto';
import micromatch from 'micromatch';
import SVGCompiler from 'svg-baker';
import { parse } from 'svg-parser';
import { optimize } from 'svgo';
const { stringify } = JSON;
export default (options) => {
    var _a;
    const svgCompiler = new SVGCompiler();
    const match = (_a = options === null || options === void 0 ? void 0 : options.include) !== null && _a !== void 0 ? _a : '**.svg';
    const svgoOptions = options === null || options === void 0 ? void 0 : options.svgo;
    const plugin = {
        name: 'svg-sprite',
        async transform(src, filepath) {
            var _a, _b, _c;
            if (!micromatch.isMatch(filepath, match, {
                dot: true,
            })) {
                return undefined;
            }
            let code = await fs.promises.readFile(filepath, 'utf-8');
            const root = parse(code);
            let topLevelAttributes = {};
            if (((_a = root.children[0]) === null || _a === void 0 ? void 0 : _a.type) === 'element') {
                topLevelAttributes = (_b = root.children[0].properties) !== null && _b !== void 0 ? _b : {};
            }
            const { name } = p.parse(filepath);
            if (svgoOptions !== false) {
                const result = (optimize(code, svgoOptions === true ? undefined : svgoOptions));
                code = result.data;
            }
            let id = name;
            if (options === null || options === void 0 ? void 0 : options.symbolId) {
                id = options.symbolId;
                if (id.includes('[hash]')) {
                    const hash = crypto.createHash('sha256');
                    hash.update(code);
                    id = id.replace(/\[hash\]/g, hash.digest('hex').slice(0, 6));
                }
                id = id.replace(/\[name\]/g, name);
            }
            const symbol = await svgCompiler.addSymbol({
                id,
                content: code,
                path: filepath,
            });
            const codeToReturn = `
        import addSymbol from 'vite-plugin-svg-sprite/runtime';
        addSymbol(${stringify(symbol.render())}, ${stringify(id)});
        export default ${stringify(id)};
        export const size = { width: ${stringify(topLevelAttributes.width)}, height: ${stringify(topLevelAttributes.height)} };
      `;
            return {
                code: codeToReturn,
                moduleSideEffects: (_c = options === null || options === void 0 ? void 0 : options.moduleSideEffects) !== null && _c !== void 0 ? _c : true,
                map: { mappings: '' },
            };
        },
    };
    return plugin;
};
